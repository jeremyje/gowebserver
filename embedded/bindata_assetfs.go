// Code generated by go-bindata.
// sources:
// ajaxupload.html
// basicupload.html
// multipleupload.html
// DO NOT EDIT!

package embedded

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _ajaxuploadHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x7b\x79\x73\xdb\x38\x96\xf8\xff\xfe\x14\x2f\xec\x43\x52\x5a\x3c\x24\xdb\x89\xa3\x48\xea\x5f\x7e\x71\xa7\xa6\xb6\x3a\x3d\x5d\x9d\x6c\xd5\x4e\x65\x7a\xa7\x20\xf2\x51\x44\x0c\x01\x1c\x00\x3a\x9c\xb4\xbf\xfb\x16\x00\x92\xe2\x25\xdb\xc9\x64\xaa\x3a\x11\x8e\x77\xdf\x60\x66\xfe\xe4\xfa\xef\xaf\xdf\xff\xe3\xf7\x5f\x20\xd3\x1b\xb6\x3c\x9b\x3f\xf1\x7d\xc8\xb4\xce\xd5\x2c\x0c\x63\xa5\x7c\x2d\x69\x7c\xa3\x82\x58\x6c\x42\x3c\x90\x4d\xce\x50\x85\xd7\x92\xac\x5f\xf1\xe4\x5a\x8a\xfc\x0d\x65\xf8\xdf\x39\x13\x24\xa1\x7c\x1d\x82\xef\x2f\xcf\xe6\x06\x13\x30\xc2\xd7\x0b\x0f\xb9\x07\x31\x23\x4a\x2d\x3c\x2e\xfc\x8f\xca\x5b\x9e\x9d\xcd\x33\x24\xc9\xf2\x0c\x60\xbe\x41\x4d\x20\xce\x88\x54\xa8\x17\xde\x56\xa7\xfe\x95\x67\x0f\x34\xd5\x0c\x97\x0e\x2f\x18\x12\x6a\x1e\xba\x3d\x73\xca\x28\xbf\x01\x89\x6c\xe1\xc5\x84\x0b\x4e\x63\xc2\x3c\xc8\x24\xa6\x0b\xef\xf3\xe7\xc0\x41\xbd\x43\xb9\xc3\xdf\x89\xce\xee\xee\xbc\x23\x2d\x4e\x36\xb8\xf0\x76\x14\xf7\xb9\x90\xda\x83\x58\x70\x8d\x5c\x2f\xbc\x3d\x4d\x74\xb6\x48\x70\x47\x63\xf4\xed\x62\x4c\x39\xd5\x94\x30\x5f\xc5\x84\xe1\x62\xe2\x41\xd8\x22\xae\xf4\x2d\x43\x95\x21\xea\x92\x7a\x18\xa6\x82\x6b\x15\xac\x85\x58\x33\x24\x39\x75\x7a\x8b\x95\xfa\x39\x25\x1b\xca\x6e\x17\x7f\x88\x95\xd0\x62\x76\x1e\x45\xe3\xf3\x28\xa2\x9a\x30\x1a\x8f\x2f\xa2\xa8\xc4\x6e\x71\x9a\x5f\x60\xed\x01\x9f\xef\xec\x6f\xfb\xc7\x4a\x24\xb7\xf0\xd9\xfe\x04\x30\x84\x7c\x87\x74\x06\x0e\xeb\x18\x14\xe1\xca\x57\x28\x69\xfa\xb2\xb8\x16\x0b\x26\xe4\x0c\xbe\x8b\xd2\xf3\xf8\x62\x55\xee\xae\x48\x7c\xb3\x96\x62\xcb\x13\xbf\xbc\x80\x97\x98\xa4\x93\xf2\x42\x4e\x12\x63\xcf\x19\x5c\x4a\xdc\xc0\x24\x98\x9a\xbf\xcb\xc3\xf0\x29\x5c\x45\x30\x8d\xe0\x69\x68\x77\x6a\x2c\x06\x46\xa1\x84\x72\x94\x15\xa3\x56\x99\x33\x98\x44\xd1\x0f\x25\x82\x0d\x39\xf8\xc5\xf6\xb3\xab\x28\x3f\x34\x10\x57\x68\x01\x34\x1e\xb4\x4f\x18\x5d\xf3\x19\xc4\xc8\x35\xca\x23\x06\xb9\xa6\x7c\x06\x11\x90\xad\x16\x2f\xef\x61\x23\x9b\x34\x55\xa6\xe8\x27\x9c\xc1\xc5\xf4\x48\xd5\x6e\xef\x91\xae\x33\x3d\x83\xf3\x28\xba\x5f\x75\x8e\xb2\xbf\x12\x5a\x8b\xcd\x0c\x2e\x2a\xf6\x4f\x92\x27\xb3\x4c\xec\x50\x8e\x7b\x8f\x52\x11\x6f\x55\xc5\x61\x49\xf2\xfc\xc5\x2a\x4d\xce\xef\xc3\xcb\xc9\xae\x82\xfa\x42\x96\x0c\x28\xa9\x80\x57\x42\x26\x28\x2b\xe0\x69\x7e\x00\x25\x18\x4d\xe0\xbb\xf8\x2a\x21\x49\xe5\x48\x09\x55\x39\x23\xb7\x33\xa0\x9c\x51\x8e\xfe\x8a\x89\xf8\xa6\xe3\x2e\x17\xf9\x01\xae\x8e\xaa\x3d\x9a\xe9\xf2\x11\x3c\x05\xd4\x38\x2f\xc3\x58\x63\xd2\x34\x5a\x69\x9d\xe7\x5d\xeb\xd4\x55\xd5\x92\xa6\xf4\xed\x78\x2b\x25\x72\xfd\xda\xac\x1e\x64\x62\xc6\x85\x1e\x42\x9d\x95\xd1\x09\xfb\x9d\xbc\xde\xb4\x69\x2f\x4b\x0d\xa7\xea\xe7\x26\x15\x42\xd7\xc2\xa8\x04\x7c\x31\x5d\x45\xab\xf3\x96\x37\x6a\x91\x3f\x6c\xf7\x02\x61\xfe\x53\xde\xf6\x1c\x0b\x3e\x29\x03\xfc\x5e\xe8\x53\xce\x5c\x1d\x7f\x99\x43\xaf\xc4\xa1\x2f\x3c\xbb\x09\x67\x5a\x4b\x0b\x3d\xd9\xab\xe9\xab\xb9\x50\x54\x53\xc1\x67\x26\x4f\x13\x4d\x77\xd8\x71\xd4\x49\x14\xe5\x07\x98\xf6\xaa\x6c\x25\x0e\x41\x46\x94\x4f\x92\x1d\xe1\x31\x26\xfe\xd6\xd5\xa1\x92\x51\xb1\xd5\x26\x04\x5c\xb0\x24\x44\x65\x98\xb4\xed\x52\x5c\xf1\x45\x9a\x2a\xd4\x33\xf0\x27\xb5\x34\xe7\xef\x71\x75\x43\xb5\xaf\x25\xe1\x25\xa3\x4d\x00\x08\x26\x97\x0a\x90\x28\xf4\x29\xf7\xc5\x56\x8f\x3b\x42\xbb\x2b\x06\x86\x54\x59\xf1\x1b\x23\x6c\xeb\x84\x2a\x3f\x91\x64\x6d\xec\xdf\xd6\xc5\x51\xd0\x69\x4d\xd0\xf2\xb0\xdf\x4a\x3d\x66\x4c\xd3\xb4\x97\xf4\xbf\xfe\x65\x08\xf3\x44\x8a\x7c\x5c\xdb\xa4\xb1\xe0\x15\x27\x55\x82\xe2\x82\xe3\xe3\x8d\xda\x42\xdf\x45\xe7\xf2\xdd\x97\x22\x6c\xb0\xd6\x53\x02\xb3\x22\xa3\xd5\xcb\x5f\x4a\x19\xeb\x44\x78\xc5\x47\x23\xe1\x3e\x2a\xe5\x17\x36\xdb\x96\xdd\x59\xc9\x1a\xcf\xb7\x7a\xdc\xb8\xa2\xb6\x71\x8c\x4a\x9d\xbe\x80\x52\x1a\x0f\x39\x1e\x57\xb2\xed\xa8\xa2\x2b\xca\xa8\xbe\x9d\x41\x46\x93\x04\xf9\x09\x0b\x56\x6c\xd4\x2d\x58\x10\xae\x6f\x39\x52\x5f\x60\xd5\x1e\x11\x7b\x68\x75\xc5\xec\xd0\x6e\x0b\x7a\x82\x93\x66\xe5\xab\x52\x0d\x59\x29\xc1\xb6\xba\x4a\x35\x36\xa9\x5e\x1e\x2d\x2e\x9d\xc1\xab\x02\xc6\x30\xad\x2f\x1b\x49\x21\x15\x72\x33\x73\xe1\xcc\x88\xc6\x7f\x0c\xc1\xbf\x8c\x7e\x18\x35\xe2\xfc\xde\x3b\xa7\xb5\xdf\x4a\xb7\xa6\xdd\x9c\x81\xeb\x43\x4f\x80\x96\x5a\xfb\xdc\xe2\x94\x70\xba\x21\x85\xec\x79\x8e\x44\xfa\xa9\x14\x1b\x9f\x72\x45\x13\x84\x60\xda\x4c\x38\x25\xef\x5f\x03\x55\x63\xe9\xff\x95\xd4\x6f\xf0\x36\x95\x64\x83\xaa\x0f\x4d\x25\xa3\x14\x9b\x6a\xf1\x38\x1d\x83\x6d\xf7\x87\x10\x55\xda\xbe\x2b\xfe\x7e\x7e\xf9\xc3\x57\xe2\x9a\x04\x93\x0e\x36\x2d\xbe\x16\x59\x0b\x55\x5d\x39\x5f\xa3\x94\x6f\xa1\x8c\x6f\xa2\x84\xff\x50\x78\xe7\xac\x12\x95\x26\x52\x3f\xd0\x3e\x9e\x02\x73\xdd\xcb\xb8\xe7\x20\x6b\x54\xbd\x87\xda\x9a\x8f\x65\x8e\x49\x29\xc3\x76\x19\x88\x82\xc9\x31\xe7\x97\x75\xa0\xb1\x29\x72\x12\xdb\x84\x5a\x65\x07\x43\x3d\x65\x62\xdf\xcc\xb1\xf7\xa5\x9f\x4f\x3e\xe5\x09\x1e\x4c\xeb\xf1\x00\x7f\x3f\x31\xb2\x42\x56\xeb\x09\xab\xe1\xec\xea\x98\xbd\xec\x28\x76\xe4\x02\x19\xa3\xb9\xa2\xaa\x3c\xde\x67\x54\xa3\xaf\x72\x12\xa3\x49\xd5\x7b\x49\xf2\xaa\x51\xdf\x4a\x65\x94\x95\x0b\x5a\x9f\xe0\xee\x9d\x27\xfa\xc5\x7d\x40\x82\xc2\x46\x4a\x4b\xd1\x2c\x32\xe6\x8a\xb3\x6c\x21\x6a\xff\x15\x5b\xcd\xbb\xd7\xbe\xce\xe8\x75\x7a\xe3\x9e\xf3\x0e\xb1\x4e\x73\x39\x31\xcd\xa5\xd0\x66\x16\xfa\x2e\x3a\xce\x3d\xd5\x79\x99\x33\x2c\x12\x5f\x52\xbe\x2e\xfa\x38\x33\x11\xf7\xcf\x5b\x7d\x66\x7f\x5a\x51\x0e\x9f\x96\x36\xf2\x71\x87\x5c\xab\xa2\xe8\x1e\x1b\xef\xf0\x29\x50\x0e\x31\x51\x08\x22\x85\x37\x44\xe9\xd7\x8c\xc6\x37\xc0\xe8\x0a\xb6\x0a\xfb\xde\x03\xec\xa3\xcf\x69\x67\x7b\xa0\xbc\xd7\xa1\x57\x5b\xad\xfb\xda\xbd\x9a\xe3\x74\xc2\xba\x05\xf3\xd0\x2c\xd9\x7c\x03\xe9\xe9\x4f\x9b\xc3\x66\x0f\xf3\xb5\x09\xe3\x2a\x3f\xc0\xe4\x59\x77\x16\x36\xbd\x9a\xb3\xd1\xa9\x64\xe4\xb8\x6e\x0c\x5a\xf5\xfd\xd6\x78\xd9\xe5\xb2\x3d\x5b\xce\xc3\xe2\x55\xc9\xfc\x7e\xe2\xfb\x20\x71\x23\x76\x08\x3a\xa3\x0a\x68\x0a\xb7\x62\x6b\xcd\xf7\x56\x24\x28\x39\xfd\x24\xed\x2b\x1e\xc0\x5c\xc5\x92\xe6\xda\xbd\x46\x0d\xd3\x2d\x8f\x4d\xaa\x19\xe2\x18\xf4\x18\xf8\xe8\xd8\x02\x12\x09\x12\x16\x80\xc1\xbf\xb7\x28\x6f\xdf\xd9\x41\x58\xc8\x57\x8c\x0d\xbd\x4c\x6f\x98\x37\xfa\x10\xfd\x59\xb5\x41\x81\x7d\x0e\xfc\x8d\x6c\x10\x16\xf5\x55\x20\x31\x67\x24\xc6\x61\x38\xfc\xdf\xbf\xfe\xa9\x46\xd6\xf6\xc3\x7f\xaa\xbf\xbe\x1f\x85\x63\xf0\xbe\x9f\x7c\x54\xdf\x4f\xbd\x91\x93\x6a\x34\x4c\x44\xbc\xdd\x20\xd7\x63\xd8\x53\x9e\x88\xfd\xb8\x28\x52\xf3\xb0\xe4\xfa\x6c\x1e\xba\x87\xc6\xb3\xf9\x4a\x24\xb7\x56\xa2\x84\xee\xca\xe7\xc8\x6a\x76\xf5\x40\x0a\x86\x0b\x6f\x43\x28\xf7\x9c\xb0\x73\x53\x86\x60\x83\x3a\x13\xc9\xc2\xcb\x85\xd2\x1e\x10\x2b\xfd\x89\x17\x46\x40\x1e\xeb\xdb\xdc\x60\xd9\x32\x4d\x73\x22\x75\x68\x70\xf8\x09\xd1\xc4\x03\x2e\x76\x84\xd1\x84\x68\x2c\xa9\xaf\xc4\xa1\xa0\xd5\xe4\xea\xd8\x61\x57\xc7\xc6\x10\xbb\x75\xf3\x42\x2c\xb8\x07\x87\x0d\xe3\x6a\xe1\x65\x5a\xe7\xb3\x30\xdc\xef\xf7\xc1\xfe\x3c\x10\x72\x1d\x4e\xa3\x28\x0a\xd5\x6e\xed\xb9\x92\xb3\xf0\x2e\x23\xaf\xa8\x34\x0b\xef\xe2\xdc\x83\x1d\xc5\xfd\xff\x17\x87\x85\x17\x41\x04\x97\x11\x5c\x9c\x7b\xcb\x79\x4e\x74\x06\xc9\xc2\x7b\x7b\x71\x15\x5c\xc0\xf4\x59\x70\x19\xfb\xc1\x0b\x88\xfc\x49\xf0\x3c\x78\x6e\xfe\x84\x49\xf0\x7c\x37\x99\x04\xcf\x32\xff\xe2\x3c\x38\xdf\xf9\xe6\x77\x1c\xf9\xc1\x0b\xdf\x5d\x28\xff\x53\x6d\x98\xf3\x60\x1a\x47\x10\xbc\x70\xeb\xf2\xbf\xec\xe2\x59\xf0\x3c\x36\x34\xcc\xca\x77\x9b\x06\x68\xe7\x3b\x08\x7f\xd2\x42\xfc\x69\xe3\x4f\x2f\x82\x4b\x78\x16\x4c\xe2\xe0\x3c\x38\x0f\xae\x82\x4b\x98\x04\xd3\xe0\x32\xb8\x00\x43\xc0\x0f\xa6\x66\xed\x07\x97\x6c\x12\x39\xfe\x2c\xe6\x82\x99\xc8\x9f\x06\x17\x96\x3b\x83\x78\x6a\x80\x98\xff\x3c\x98\xc0\x95\x11\x67\x7a\x19\x9c\x3f\x46\x1c\x73\xcf\x82\xf9\x57\xc1\x79\xec\x3b\x64\x75\x9c\xaa\x90\x05\x22\x98\x06\x17\x6c\x12\x81\xe1\xe4\x93\x17\x2e\xe7\xc6\x2e\x35\xcb\xba\x61\xca\xb9\x8e\xc9\x8f\x5e\xf1\x44\x5d\x79\xd9\x1b\xca\xf0\x8d\x90\x1b\x13\x22\xc6\xd1\x68\x52\x5e\xac\x3b\x84\xdb\x31\xce\xe6\x3b\x07\x64\xe8\xc7\x24\x2f\x3c\x36\x16\x5b\xae\xef\xcc\x7c\x89\x0a\xca\x77\x2a\x0f\xca\x9b\xee\xe9\xb9\x60\xc8\xe5\xe7\x54\xc8\x82\xcc\x72\xee\xca\xe0\xf2\x75\x26\x84\x42\x20\x16\x8d\x49\x29\x76\x77\xae\x72\xc2\x1b\xac\x54\xa3\xb4\xb7\x04\x21\xc1\x2c\x81\x6a\xc8\x50\x1a\xa8\x9c\xf0\x65\x30\x0f\x2d\x95\x1a\xd5\x22\x51\x3b\x3d\xa8\xed\x6a\x43\x75\x53\x40\x77\xc1\x2b\x3e\x09\xcc\x43\xb7\xae\x22\x28\x4c\xe8\xae\x5a\xd4\x75\xea\xfa\x87\x52\xab\x5a\xdc\x98\xc5\x8e\xb0\x6d\x5d\xc7\xef\xcd\xb6\x51\x6e\x68\x73\x64\x6f\x4c\x56\x03\x54\xc9\x03\xe5\xeb\x1f\x33\xdb\x07\xbd\x6c\x92\x6f\x43\x16\xf3\x93\xb7\xbc\x16\x1c\x9f\xc0\x9c\xdc\xf7\xa9\xa2\x01\x59\x34\x9f\x65\x82\x6a\xea\x00\x36\x42\xe2\xcf\xf3\x90\x2c\xef\x27\x6f\xa7\x58\x6f\xf9\x8b\xf9\xeb\x09\x58\x7b\x2d\x4b\x43\x7c\x03\x66\xde\xcb\x5b\x20\x6b\x42\xf9\x93\x16\x2b\x73\x9b\x00\xab\x7c\x2a\x34\xca\x8a\xc7\xbc\xf2\xaa\x6b\xe3\x1e\x84\x27\x70\x2d\x45\x6e\xfc\x25\xb6\x1d\x85\x16\x50\x3c\xa7\x28\xb1\x41\xe7\xb9\xc1\xd1\xe9\xc2\xfc\x48\xa3\x44\x5c\x90\x6e\xd7\xad\x81\xa9\x6c\x4a\x4b\x1a\xeb\xc1\xcb\x56\x25\xeb\xd6\x10\xdb\x33\x1f\x2b\x5b\x18\x42\x8a\x44\x6f\x25\x42\x82\x1a\x2d\x94\x89\x0d\xeb\xd5\x3f\xda\xf7\x22\xc7\x66\xad\x12\x52\xf5\xaa\x78\x11\x2a\xec\xb4\x80\x8a\xe0\xa8\x36\xee\x98\xbb\xc6\x56\x0b\x28\xd9\x08\x62\x89\x44\xe3\x2f\x0c\xcd\x6a\x38\x48\xe8\x6e\x50\xcd\x3b\x00\x12\xf5\x56\x72\x18\x0e\x07\x86\xfa\x9a\xac\x18\x0e\x4c\x3f\x96\xd0\xdd\x08\xfe\xfa\x0b\x86\x03\xc1\xcd\x89\x35\x53\x79\x02\x3f\xfe\x08\x76\x5f\xe4\xd5\xe5\x91\xdd\x34\x49\xe5\x9a\x68\x62\xb7\x9d\xfc\x6e\x9f\x32\xfc\x03\x49\x82\xb2\x76\x52\x4d\x5d\xc3\xd1\xcb\xb3\xa3\x72\x48\x9e\xb3\x5b\xca\xd7\xa0\x33\x04\x4c\x53\x8c\xb5\x55\x0f\xee\x50\xde\x9a\x5f\x9b\x9a\x62\xcc\x52\xd5\xc5\xed\x74\x0b\x03\xd3\xe7\x1c\x45\x7e\x25\x25\xb9\x0d\x72\x29\xb4\x30\xc1\x1c\xa4\x42\xfe\x42\xe2\x2c\x88\x09\x63\x43\x8b\x6d\x7c\x54\xad\x59\xb7\xd5\xeb\x12\xc1\xc2\x52\x6e\x52\x1b\x0e\xec\xd9\x87\x5a\xe2\xfd\x73\x30\x1a\x57\xd0\x00\x2e\x0f\xf6\xc3\xda\xb3\xe6\x75\x1b\x65\x6f\xd5\xfa\x04\x44\xfd\x41\xc9\x84\x5e\x13\xb8\x1c\x5a\xfb\x60\x2b\xbd\x54\x11\xd8\x84\x35\x96\xcd\xd1\x96\x09\xa3\xdc\x94\x30\x85\xf5\x73\x95\x89\x7d\x75\x58\x29\xcb\x6c\xd4\xb5\x55\x49\x1c\x98\x41\xef\xb5\xfb\x2a\x6a\x20\x6c\xe0\x31\xe4\x6b\x9d\xc1\x12\x26\xf0\x33\x0c\xad\xe6\x82\x35\xea\x57\x5a\x4b\xba\xda\x6a\x1c\x0e\x7a\x2b\xcf\xc0\xba\xe5\x60\x30\xaa\x5a\xbb\x41\x51\x8a\x06\xe3\x06\xe6\x11\xcc\xdc\xfa\x43\xf4\x67\x60\x32\xf5\xcb\x1a\x63\x77\x75\x69\xb4\xa4\xeb\x35\x4a\xe3\xbb\xef\x6c\x95\x38\x15\x5d\xa5\x0b\xd8\x49\xa6\x27\xc6\x76\x36\xc2\xfe\xf6\xfe\xed\xaf\xf6\xa7\xaa\x07\x9a\xb5\xa7\xd9\x0d\x28\xa7\xba\xb8\xea\x8a\xd2\x60\x0c\x5a\x6e\x71\xec\xf4\xdc\x82\xb1\xc6\x33\x43\x01\xd1\x71\xe6\xc0\x2c\x9a\xc6\xb5\xbb\x2a\x7e\x6c\x04\x31\xd4\xba\x0c\x20\x65\x52\xaf\x04\xfb\x58\xa3\x05\xdc\x70\xb1\x87\x3d\x02\x91\x08\x6b\x61\x2f\x09\xd8\x90\x1b\x04\xc2\xe1\xd5\x47\x72\x00\x89\xff\xde\xa2\xd2\x0d\x9f\x27\x1f\xc9\xe1\x0d\x23\xeb\x7b\xf2\x8a\x35\x60\x5d\xe0\x12\x26\x50\x0d\xa3\x9a\xe0\x18\x8c\x61\xe0\x6a\xe8\x23\x00\x8c\xe9\x0c\x80\x39\x7e\xc4\x75\x5b\x86\x07\xe3\xda\xa3\x4e\xa1\x43\x92\xe7\xc8\x93\xd7\x19\x65\xc9\xb0\x84\x1d\x35\xf5\x66\x06\xa8\x0d\xd1\xd4\xe4\x82\x5b\x70\xc6\xb1\x4a\xb4\x9d\xbb\xc9\xd2\x94\x61\xd1\xeb\x54\x70\xce\x73\x49\x92\x58\xe3\xfc\x4a\x95\x46\x8e\x72\x38\x88\x33\xc2\xd7\x86\x93\xe3\x8c\xd3\xf4\xa5\x2a\x88\x86\x18\x68\x22\xd7\xa8\x03\x17\x42\x2f\xef\xf3\xcd\x61\xed\xf8\xae\xc5\xff\xb1\x80\xb8\xae\x8c\xa6\x8e\xfb\xa2\xda\x50\x05\x64\x47\x28\x33\x49\xfe\xc8\x7e\x0a\xc3\x76\x75\x69\xf2\x69\xb5\x67\x8b\xb6\x11\xce\x48\x3a\x1c\xf4\x7c\xa3\x18\x8c\x5e\xb6\x7d\xef\xf5\xbb\x77\x60\xa6\x96\xca\xf1\x8e\x0c\x52\x05\x6a\x9b\xe7\x42\x6a\x4c\x60\x75\x6b\xaf\xaf\xa4\xd8\x2b\x94\x67\x35\xda\x1f\x6c\x59\x32\xe6\x3f\x16\xa1\x62\x81\x3c\x29\x7f\x9a\x99\xf6\xb8\xad\x8f\x0b\x86\x64\x87\x6e\x21\xf2\xc1\x9f\x65\xb2\xaf\x8d\x9d\x36\x94\x5a\x21\xee\xdc\xa5\x6d\x50\x7b\xf5\xb4\x35\x0b\x13\xe4\xd2\xde\x2b\x35\xb0\xe5\x7b\xc2\xad\x88\x98\x91\x1d\x15\x5b\xa9\x5a\x30\x18\x14\x20\xd7\x98\x92\x2d\x6b\xd8\xb7\xbc\xa1\xb4\xc8\x7f\x97\x22\x27\x6b\xe2\x72\x52\xf3\xca\x5d\x33\x17\x34\x56\x1f\x4e\x28\xe8\xdb\xea\xa2\xab\x8a\x3e\xa7\xa9\x7d\xea\x6b\x67\xc6\x87\x45\xa8\x99\xb2\x66\xfb\x6f\x6e\xd5\x07\x25\x71\xcf\x1c\x5f\x2d\x4c\x3f\x17\x4e\x92\xfb\x9c\xab\x55\x91\x31\x30\xc5\xf1\xbd\x7d\xdc\x46\xe9\xf2\x86\x0d\x3f\x1b\xef\xf6\x92\xce\x88\x86\x3d\x9a\x2e\xd3\xc1\x36\xf0\x1d\x93\x4f\x1d\x73\x4b\x90\xde\xe4\x73\x42\xb4\xbb\x46\x26\x2a\x33\x8f\xc9\x9b\x7b\xa2\x8a\x5c\xaa\x6b\x4c\x9c\x50\x44\x55\x11\x4f\xa9\xa2\x1b\x63\xc9\x36\x67\x34\x26\x1a\x1d\x15\xa5\xa8\xe0\x55\xee\x2b\xfe\x99\x06\x08\x6e\xf3\x1f\xe5\x90\x4b\xb1\x96\xa8\xea\x71\x68\x72\x60\xcb\xcc\xc5\x43\x8e\xb2\x86\xae\xc6\xb4\xc1\x68\x54\x76\xcc\xb6\x56\x37\xb4\x71\xc2\xe5\x6b\xc0\x1d\x47\xe8\x75\x2b\xdb\xd0\x0d\x9a\x9a\xee\xcf\xd2\xa6\x64\x99\x92\x6d\xcb\x52\x31\xda\x98\x4e\x79\x63\xdf\xdc\xca\x7c\x5a\x97\xb4\xe9\x54\x7d\xb9\xa7\x71\x21\x0c\x61\x4d\x74\x86\xb2\xd4\xb5\x35\xa8\x71\xbd\x4e\x4f\x64\x18\x31\x9d\x3f\x2c\x80\xe3\x1e\xca\x41\xc0\xb5\xd0\x4d\xb7\x32\xc2\x34\xbc\xae\x13\x73\xf7\x36\xe9\x75\xd0\x71\xb3\xfd\xec\x62\x82\x8a\xb1\xa2\x01\xe8\xed\x34\x6d\x8f\x31\x72\xfd\x63\x27\xff\xde\xb5\xc3\xbb\xa3\x23\xd2\xd7\x37\xd5\x15\x53\x28\xe5\x7f\xde\xfe\xfa\x37\xad\xf3\x3f\xdc\xcd\x76\x1a\x37\x17\x03\x91\xa3\x1b\x3b\x5a\x1c\xba\x67\x43\xcb\x63\xf7\xd0\xbd\x22\x9a\x43\xd3\x47\xb6\x8d\xe8\xf0\xf2\xfb\xc6\x46\xf7\xbf\xd3\x2e\x79\xc2\x87\x4b\x63\x5a\x0a\x4a\x13\xbd\x55\xb0\x5c\xc0\x34\x8a\xcc\xd0\x57\xdf\x9d\xc3\x45\x14\xf5\x59\xc7\x0e\xac\xce\x6d\xfe\xeb\xdd\xdf\x7f\x0b\x72\x22\x15\x3a\x84\x12\x55\x2e\xb8\xc2\xf7\x78\xd0\x1d\xb2\xbd\xe1\x66\x10\x05\xe5\x97\xe5\xc5\xc2\x6a\x03\x7e\x86\xc1\xf1\x2b\xfd\x00\x66\xd0\x88\xb1\x36\x56\x23\xce\x93\x3a\x9e\x51\x35\x85\xb5\xa6\x18\x7b\xc9\x9e\x75\x1c\xa6\x5d\xc0\x99\x42\x20\x0c\xa5\x1e\x0e\xec\x8b\x49\x00\xbf\x33\x24\x0a\xc7\xf6\x9f\x8a\x92\xd8\x35\x99\x7b\x5c\x6d\x88\xd2\x28\x9f\x74\x0a\x4a\xbf\x45\xdd\xe4\xf7\xed\x4d\xda\xcf\xaa\xae\xde\x64\x1e\xc5\x9e\x32\xb1\x56\xc6\x5e\xb3\x20\x9e\xb5\x54\x13\x86\x26\x9b\xb2\x15\x89\x6f\xdc\x08\x62\x3f\x3a\x52\xc1\xeb\x39\x4d\xb0\x04\xe5\xc3\x29\xcd\x4e\xe8\xf6\x73\x75\xf1\x31\x60\x50\x08\x6a\xf7\x06\xf0\x93\x0d\xc4\x6b\xa2\x71\x38\x32\x51\xf4\x9e\x6e\x70\xd8\x98\x7d\x9d\x17\x48\x07\x7d\x72\xda\x71\xe8\xda\xa1\xf6\x7d\x05\xf8\xfd\x70\x30\x2f\x16\xee\x95\xd0\x90\xae\x31\xf6\x13\x0c\x3c\xb0\x5f\x50\x16\x5e\xf3\x93\x8f\xb7\x9c\x87\xee\xe2\xb2\x83\xdf\xed\xf7\x0f\x48\x47\xe4\x9d\x74\xeb\x80\x0c\xb1\xa0\xa0\x65\x14\x63\xa8\x0d\x5a\x04\x2a\x79\x57\x22\xb9\x6d\x8c\x4c\x0e\x4b\xdf\x70\xda\x9a\xef\xec\x24\xd3\xe6\xa7\x8f\xa1\x6e\xf1\xb7\x63\xc4\xbd\xcd\x58\x7f\xba\x28\x10\x16\xff\xee\xfa\xba\x21\x03\xe5\x1c\xa5\x19\xc9\x3b\x6e\xfe\xa8\xd8\x78\xb8\xad\xfd\xe2\xa4\xd3\x87\xd2\x11\xef\xaa\xb1\x37\xdd\xfe\xa7\xf9\xa9\x50\x57\x4e\x4c\x67\xf4\x9b\x48\xb0\x20\x7f\x8f\xa1\xef\x4e\x44\xb0\x9d\x40\xeb\x8d\x5f\xf9\xea\x54\x35\x0b\x34\x85\x8c\x28\x20\x60\x2a\x81\xfd\xc4\x6b\x79\x0a\x0b\xf6\x2b\xd8\x7b\x4b\x7e\x81\xb5\xde\x15\x72\x2d\x6f\x9b\xfe\x61\xb7\xfa\x06\x71\x46\xe3\x9b\x7b\x9b\xeb\x87\x66\xb0\x87\x7a\xb5\x71\xc3\xda\xed\xf0\xb3\xfd\x86\x65\x62\x78\x72\x30\x68\x4f\xf2\x6f\xa8\xc4\x54\x1c\xc0\x7d\x96\x5d\x6d\xd7\x90\xd2\x83\xcd\x83\xb6\xd7\xb3\x38\x1f\x7c\x81\xb0\xc0\xa7\xe3\xa9\x64\xac\x33\xd8\x3b\xb8\x16\x77\x0f\x11\x5b\xb1\xad\x7c\x3c\xad\x52\x85\x27\xc9\x9d\x35\x29\xdf\xf5\x7e\x9a\x6d\x7d\x9b\x9d\x87\xee\x93\xec\x3c\x74\xff\xaf\x93\xff\x0b\x00\x00\xff\xff\x9d\xe4\xe8\x3c\x86\x32\x00\x00")

func ajaxuploadHtmlBytes() ([]byte, error) {
	return bindataRead(
		_ajaxuploadHtml,
		"ajaxupload.html",
	)
}

func ajaxuploadHtml() (*asset, error) {
	bytes, err := ajaxuploadHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ajaxupload.html", size: 12934, mode: os.FileMode(420), modTime: time.Unix(1488052684, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _basicuploadHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\x41\x6a\x03\x31\x0c\x45\xf7\x3e\x85\xf0\xbe\x9d\x0b\x78\x66\x99\x65\x29\xb4\x3d\x80\x12\x2b\xd8\xd4\xb2\xcc\x44\x0e\x84\x90\xbb\x17\x8d\xdb\x32\x8b\x76\xe9\xcf\xff\x0f\xeb\x85\xa4\x5c\x16\xe7\x42\x22\x8c\x8b\x03\x08\x9a\xb5\xd0\xf2\xd1\x8a\x60\x84\x73\x2e\x14\xa6\x11\xb9\x30\x8d\x92\x0b\x47\x89\xb7\xad\x7c\x96\x95\x81\xea\x49\x6f\x8d\x66\xcf\xbd\x68\x6e\xb8\xea\x64\xf9\x53\x44\x45\x0f\x78\xd2\x2c\x75\xf6\xf7\xfb\xf3\x80\xbe\xd1\x7a\xa5\x57\xd4\xf4\x78\x78\x60\xd2\x24\x71\xf6\x4d\x2e\xea\x0d\x09\x10\x72\x6d\x5d\x61\x20\xed\x03\x1e\x2a\x32\xed\x08\x87\x5c\xe8\x20\x2b\xbf\x20\x93\x41\xa6\x3f\x86\x29\xc7\x48\xf5\x67\xaa\xf2\x69\x8f\x2b\x96\xbe\x07\xbd\x5b\xfc\x1f\xe1\xd2\x8f\x9c\xf5\x77\xd4\xb7\xc5\x77\x35\x6c\x17\x9a\x92\xa1\xc2\xdc\x98\xc8\xaf\x00\x00\x00\xff\xff\x3e\x84\x3a\x47\x4f\x01\x00\x00")

func basicuploadHtmlBytes() ([]byte, error) {
	return bindataRead(
		_basicuploadHtml,
		"basicupload.html",
	)
}

func basicuploadHtml() (*asset, error) {
	bytes, err := basicuploadHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "basicupload.html", size: 335, mode: os.FileMode(420), modTime: time.Unix(1488048394, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _multipleuploadHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x93\xcf\x6a\xdc\x30\x10\xc6\xef\x7a\x8a\xa9\xee\x5e\x15\x7a\x0b\xb2\xa0\x87\x2c\x0d\x24\x6d\x60\xb7\x50\x7a\x09\xf2\x6a\x76\xad\x56\x7f\x8c\x3c\x36\x0d\x21\xef\x5e\x24\xd9\x1b\x13\xb2\xb7\x99\xfd\xe6\x37\xdf\x8c\xc6\xb2\x27\xef\x14\x93\x9f\x9a\x06\x7a\xa2\xe1\x46\x88\xce\xc5\xcb\x8e\x50\x7b\x4a\x88\x7d\x9c\x46\xdc\x9d\xa2\x17\xd3\xe0\xa2\x36\x36\x5c\x9a\xb3\x75\x38\x36\xfa\x8f\xfe\x07\x4d\xa3\x98\xec\x51\x1b\xc5\x00\x24\x59\x72\xa8\x7e\x16\x21\x64\x95\x14\x35\xc5\xa4\xa8\x22\x26\xbb\x68\x9e\x15\xcb\xea\x73\x4c\x1e\xac\x69\x79\x25\x73\xd0\x27\xb2\x31\xb4\xfc\xe5\x65\x57\x19\x07\x4c\x33\x3e\x6a\xea\x5f\x5f\x39\x78\xa4\x3e\x9a\x96\x3f\xfe\x38\x1c\x39\x60\x38\xd1\xf3\x80\x2d\xf7\x93\x23\x3b\xe8\x44\x22\xf3\x1a\xa3\x49\xf3\xc2\x07\x90\x36\x0c\x13\x41\xd5\xf5\xd6\x18\x0c\x1c\x82\xf6\xd8\x72\x8a\x7f\x73\x30\x6b\x37\xe1\xa6\xe1\x31\xa7\x73\x33\xa1\x2a\xe1\x6c\xd1\x99\x11\xa9\x86\x00\xd2\xe1\x05\x83\x51\xdf\x8e\x0f\xf7\xb0\xb7\x0e\xa1\x16\x4a\xb1\xfc\xc1\x56\xe1\x47\xbd\xf3\xb0\x0f\x5f\x7f\x3d\xed\xef\xee\x6f\x9f\x0e\x77\xbf\x6f\x57\x3b\xef\x92\x8b\xad\x2f\x9f\xf3\xaf\x98\x59\xa9\xc6\xce\xab\x95\x6c\x46\x77\xe8\xe0\x1c\x53\xcb\xcb\x9b\xa0\xc3\x13\x71\x95\x7d\x8d\x40\x11\xea\x62\x6f\xa4\x28\xc2\x4d\xe1\xd6\x5c\xae\xac\xd6\x36\x8c\xc5\xd7\x75\x31\x19\xb9\x8f\xc9\x7f\xd7\x1e\xcb\x63\x94\xad\xbb\xeb\xfe\x33\x42\x6c\x1a\x18\x3b\x5f\x91\x26\xe9\x0b\x57\x31\x81\x49\x71\x28\x67\x31\x42\x8f\x09\xa5\xd8\x4c\xb3\x04\xec\x5d\xfd\x38\x75\xde\x52\x37\x11\xc5\xc0\x37\xfc\x9a\x59\x26\xa8\x22\xbe\x1e\x5e\x19\x5f\x8a\x2a\xf9\x88\x2f\xc5\xdb\xb3\xb2\x12\xc6\xe4\xf3\x8d\x2e\xb7\x29\x45\xf9\x28\xfe\x07\x00\x00\xff\xff\x22\x8f\x0a\x70\x1b\x03\x00\x00")

func multipleuploadHtmlBytes() ([]byte, error) {
	return bindataRead(
		_multipleuploadHtml,
		"multipleupload.html",
	)
}

func multipleuploadHtml() (*asset, error) {
	bytes, err := multipleuploadHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "multipleupload.html", size: 795, mode: os.FileMode(420), modTime: time.Unix(1488049195, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"ajaxupload.html": ajaxuploadHtml,
	"basicupload.html": basicuploadHtml,
	"multipleupload.html": multipleuploadHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"ajaxupload.html": &bintree{ajaxuploadHtml, map[string]*bintree{}},
	"basicupload.html": &bintree{basicuploadHtml, map[string]*bintree{}},
	"multipleupload.html": &bintree{multipleuploadHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
